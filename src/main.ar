const boardsize = 20
type coordinate = (0..boardsize, 0..boardsize)
import std/graphics/prelude/*


struct SnekGame:
    apple# coordinate,
    snek# [boardsize, [boardsize, bool]] 
    direction# Direction 
    coordinate#head,
    int# length, 
     
    impl:
        #update: self; 
        (
            if self.apple == self.head then (
                self.length += 1
            )
            if self.snek[self.head.0[self.head.1] then self.game_over
            self.snek[self.head.0[self.head.1]] = true
            match self.direction if
                Direction::Up then head.1++,
                Direction::Down then head.1--,
                Direction::Right then head.0++,
                Direction::Left then head.0
            ;
        )
	;
;

main:;(
    window = Window::new
        .title("snek")
        .fixed_size(500, 500)
    frame = Canvas::new
        .coordinates(boardsize, boardsize).seal()
    game_state = SnekGame: 
            board = (std::rnd, std::rnd), 
            [boardsize^2; bool],
            Direction::default(),
            (10, 10),
        ;
    loop (
        events = window.update().events()
        game_state.direction = 
            match events.0 on
                Some(Key::Left) -> Direction::Left,
                Some(Key::Right) -> Direction::Right,
                Some(Key::Up) -> Direction::Up
                Some(Key::Down) -> Direction::Down
           ;
        draw(game_state.update())
        
    )
)

#draw: 
    state #SnekGame,
    frame #Canvas,
    window #Window
(
    for row, x_index in state.snek.enumerate() (
        for block, y_index in state.snek[index].enumerate() (
            if block (
                frame
                    .square()
                    .xy(x_index, y_index)
                    .red()
                    .build()
            )
        )
    )
    window.draw(frame) 
)

enum Direction:
    Up,
    Down,
    Left,
    Right,
    impl default:
        default:;Self(self__Right)
    ;
;

row, x_row = state.snek.enumerate()
z = loop: row, x_row (
    _ = if row.is_empty then return () else continue (row.next, x_row.next)
)
